import random
import json
import os

# ----------------------- р╕Др╕ер╕▒р╕Зр╕Др╕│ (р╕лр╕бр╕зр╕Фр╕Др╕Зр╣Ар╕Фр╕┤р╕б) + р╕Ир╕▒р╕Фр╕гр╕░р╕Фр╕▒р╕Ър╕Др╕зр╕▓р╕бр╕вр╕▓р╕Б -----------------------
WORDS_BY_LEVEL = {
    "easy": {
        "animals": ["PANDA", "SHEEP", "HORSE", "GOOSE", "EAGLE", "ZEBRA", "WHALE"],
        "fruits":  ["APPLE", "MANGO", "GRAPE", "LEMON", "PEACH"],
        "tools":   ["RULER", "PHONE", "BOOKS", "TABLE"],
        "instruments": ["AUDIO", "PIANO", "MUSIC", "SOUND", "DRUMS"],
        "colors":  ["GREEN", "BLACK", "BROWN", "WHITE"]
    },
    "medium": {
        "animals": ["HIPPO", "RHINO", "SNAIL"],
        "fruits":  ["MELON", "OLIVE", "BERRY", "GUAVA"],
        "tools":   ["PAPER", "SPOON", "CLOCK"],
        "instruments": ["STAGE", "DANCE", "ALBUM"],
        "colors":  ["CREAM", "LEMON", "PEACH"]
    },
    "hard": {
        "animals": ["HYENA", "SHARK", "SLOTH"],
        "fruits":  ["PLUMS", "COCOA"],
        "tools":   ["BRUSH", "PLATE", "DOLLS"],
        "instruments": ["RHYME", "REMIX", "MIXER", "OPERA", "BANDS"],
        "colors":  ["BEIGE", "AZURE", "AMBER"]
    }
}

ALL_CATEGORIES = ["animals","fruits","tools","instruments","colors"]

# ----------------------- р╕Др╣Ир╕▓р╕Др╕Зр╕Чр╕╡р╣И -----------------------
ATTEMPTS_FIXED = 6
LEADERBOARD_FILE = "leaderboard.json"

# ======================= (1) р╣Вр╕лр╕ер╕Фр╕ер╕╡р╕Фр╣Ар╕Фр╕нр╕гр╣Мр╕Ър╕нр╕гр╣Мр╕Ф =======================
def load_leaderboard():
    if not os.path.exists(LEADERBOARD_FILE):
        return {"players": {}}
    try:
        with open(LEADERBOARD_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {"players": {}}

# ======================= (2) р╣Ар╕Лр╕Яр╕ер╕╡р╕Фр╣Ар╕Фр╕нр╕гр╣Мр╕Ър╕нр╕гр╣Мр╕Ф =======================
def save_leaderboard(data):
    with open(LEADERBOARD_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# ======================= (3) р╕кр╕╕р╣Ир╕бр╕Др╕│р╕Хр╕▓р╕бр╕Др╕зр╕▓р╕бр╕вр╕▓р╕Б =======================
def pick_answer(diff: str):
    cats = [c for c in ALL_CATEGORIES if len(WORDS_BY_LEVEL[diff].get(c, [])) > 0]
    if not cats:
        raise ValueError(f"No words configured for difficulty '{diff}'")
    category = random.choice(cats)
    answer = random.choice(WORDS_BY_LEVEL[diff][category]).upper()
    return answer, category

# ======================= (4) р╣Гр╕лр╣Йр╕кр╕╡р╣Бр╕Ър╕Ъ custom =======================
def feedback(answer: str, guess: str) -> str:
    """
    р╕Бр╕Хр╕┤р╕Бр╕▓ custom:
    - р╕Хр╕гр╕Зр╕Хр╕│р╣Бр╕лр╕Щр╣Ир╕З = р╣Ар╕Вр╕╡р╕вр╕з (ЁЯЯй)
    - р╣Др╕бр╣Ир╕Хр╕гр╕Зр╕Хр╕│р╣Бр╕лр╕Щр╣Ир╕З р╣Бр╕Хр╣И 'р╕Хр╕▒р╕зр╕нр╕▒р╕Бр╕йр╕гр╕бр╕╡р╕нр╕вр╕╣р╣Ир╣Гр╕Щр╕Др╕│р╕Хр╕нр╕Ъ' = р╣Ар╕лр╕ер╕╖р╕нр╕З (ЁЯЯи) р╣Др╕бр╣Ир╕Ир╕│р╕Бр╕▒р╕Фр╕Ир╕│р╕Щр╕зр╕Щ
    - р╣Др╕бр╣Ир╕нр╕вр╕╣р╣Ир╣Гр╕Щр╕Др╕│р╕Хр╕нр╕Ър╣Ар╕ер╕в = р╕Вр╕▓р╕з (тмЬ)
    """
    n = len(answer)
    res = [""] * n

    # pass 1: р╣Ар╕Вр╕╡р╕вр╕зр╕Бр╣Ир╕нр╕Щ
    for i in range(n):
        if guess[i] == answer[i]:
            res[i] = "ЁЯЯй"

    set_in_answer = set(answer)

    # pass 2: р╣Ар╕лр╕ер╕╖р╕нр╕З/р╕Вр╕▓р╕з
    for i in range(n):
        if res[i] == "ЁЯЯй":
            continue
        res[i] = "ЁЯЯи" if guess[i] in set_in_answer else "тмЬ"

    return "".join(res)

# ======================= (5) р╣Ар╕ер╣Ир╕Щр╕лр╕Щр╕╢р╣Ир╕Зр╕гр╕нр╕Ър╣Бр╕ер╕░р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Ьр╕е =======================
def play_one_round(diff: str, name: str, lb: dict) -> tuple[bool, int]:
    """р╣Ар╕ер╣Ир╕Щ 1 р╕гр╕нр╕Ъ: р╕Др╕╖р╕Щр╕Др╣Ир╕▓ (р╣Бр╕Юр╣Йр╣Др╕лр╕б, р╕Др╕░р╣Бр╕Щр╕Щр╕гр╕нр╕Ър╕Щр╕╡р╣Й). р╕Цр╣Йр╕▓р╣Бр╕Юр╣Й = True."""
    attempts_allowed = ATTEMPTS_FIXED
    answer, category = pick_answer(diff)
    word_len = len(answer)

    print(f"\nЁЯХ╣я╕П р╕гр╕нр╕Ър╣Гр╕лр╕бр╣И! р╣Вр╕лр╕бр╕Ф: {diff.upper()} | р╕лр╕бр╕зр╕Ф(р╕кр╕╕р╣Ир╕б): {category} | р╕Др╕│р╕вр╕▓р╕з {word_len} | р╣Вр╕нр╕Бр╕▓р╕к: {attempts_allowed}")
    print("ЁЯЯй р╕Хр╕гр╕Зр╕Хр╕│р╣Бр╕лр╕Щр╣Ир╕З | ЁЯЯи р╕бр╕╡р╕Хр╕▒р╕зр╕Щр╕╡р╣Йр╣Гр╕Щр╕Др╕│р╕Хр╕нр╕Ъ (р╕Бр╕╡р╣Ир╕Хр╕▒р╕зр╕Бр╣Зр╣Ар╕лр╕ер╕╖р╕нр╕З) | тмЬ р╣Др╕бр╣Ир╕бр╕╡р╕Хр╕▒р╕зр╕Щр╕╡р╣Й")
    print("тД╣я╕П р╣Ар╕Фр╕▓р╕Др╕зр╕▓р╕бр╕вр╕▓р╕зр╣Др╕бр╣Ир╕Хр╕гр╕З тЖТ тАШр╣Др╕бр╣Ир╕Хр╕▒р╕Фр╕гр╕нр╕ЪтАЩ | р╣Ар╕лр╕ер╕╖р╕н 1 р╕Др╕гр╕▒р╣Йр╕Зр╕кр╕╕р╕Фр╕Чр╣Йр╕▓р╕в тЖТ р╣Гр╕Ър╣Йр╕лр╕бр╕зр╕Ф")

    won = False
    attempts_used = 0
    used_hint = False

    while attempts_used < attempts_allowed:
        guess = input(f"\nр╕Др╕гр╕▒р╣Йр╕Зр╕Чр╕╡р╣И {attempts_used+1}/{attempts_allowed} - р╕Ыр╣Йр╕нр╕Щр╕Др╕│: ").upper().strip()

        if len(guess) != word_len:
            print(f"тЪая╕П р╕Хр╣Йр╕нр╕Зр╣Ар╕Ыр╣Зр╕Щр╕Др╕│ {word_len} р╕Хр╕▒р╕зр╕нр╕▒р╕Бр╕йр╕г  р╕ер╕нр╕Зр╣Гр╕лр╕бр╣И!")
            continue

        attempts_used += 1
        print(feedback(answer, guess))

        if guess == answer:
            print("ЁЯОЙ р╣Ар╕Бр╣Ир╕Зр╕бр╕▓р╕Б! р╕Чр╕▓р╕вр╕Цр╕╣р╕Б")
            won = True
            break

        remaining = attempts_allowed - attempts_used
        if remaining == 1 and not used_hint:
            print(f"ЁЯТб HINT: р╕лр╕бр╕зр╕Фр╕Вр╕нр╕Зр╕Др╕│р╕Щр╕╡р╣Йр╕Др╕╖р╕н тЮЬ {category.upper()}")
            used_hint = True

    if not won:
        print(f"ЁЯТе р╣Бр╕Юр╣Йр╕гр╕нр╕Ър╕Щр╕╡р╣Й! р╕Др╕│р╕Хр╕нр╕Ър╕Др╕╖р╕н: {answer}  (р╕лр╕бр╕зр╕Ф: {category})")

    # р╕Др╕┤р╕Фр╕Др╕░р╣Бр╕Щр╕Щ (р╕Др╕╣р╕Ур╕Хр╕▓р╕бр╕Др╕зр╕▓р╕бр╕вр╕▓р╕Б) тАФ р╣Др╕бр╣Ир╕бр╕╡р╣Ар╕зр╕ер╕▓/р╣Вр╕Лр╕Щр╣Ар╕зр╕ер╕▓
    mult = {"easy": 1.0, "medium": 1.4, "hard": 1.8}[diff]
    score = int(((attempts_allowed - attempts_used + 1) * 10) * mult) if won else 0

    # р╕нр╕▒р╕Ыр╣Ар╕Фр╕Х leaderboard + р╕Ыр╕гр╕░р╕зр╕▒р╕Хр╕┤ (р╕Хр╕▒р╕Ф date/р╣Ар╕зр╕ер╕▓/last_play р╕нр╕нр╕Бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф)
    p = lb["players"].get(name, {
        "best_score": 0,
        "total_score": 0,
        "games": 0,
        "history": []
    })

    p["history"].append({
        "difficulty": diff,
        "category": category,
        "answer": answer,
        "attempts_allowed": attempts_allowed,
        "attempts_used": attempts_used,
        "won": won,
        "used_hint": used_hint,
        "score": score
    })

    p["games"] += 1
    p["total_score"] += score
    p["best_score"] = max(p["best_score"], score)

    lb["players"][name] = p
    save_leaderboard(lb)

    print(f"\nЁЯУК р╕кр╕гр╕╕р╕Ыр╕гр╕нр╕Ър╕Щр╕╡р╣Й | {'р╕Кр╕Щр╕░' if won else 'р╣Бр╕Юр╣Й'} | р╣Гр╕Кр╣Й {attempts_used}/{attempts_allowed} р╕Др╕гр╕▒р╣Йр╕З | р╣Бр╕Хр╣Йр╕б {score}")
    print(f"тЮбя╕П р╕гр╕зр╕бр╕кр╕░р╕кр╕бр╣Гр╕Щ leaderboard: total {p['total_score']} | best {p['best_score']}")

    return (not won), score  # р╣Бр╕Юр╣Йр╣Др╕лр╕б, р╕Др╕░р╣Бр╕Щр╕Щр╕гр╕нр╕Ър╕Щр╕╡р╣Й

# ======================= (6) main: р╕Др╕╕р╕б session р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф =======================
def main():
    print("ЁЯОо WORDLE+ (р╣Ар╕ер╣Ир╕Щр╕Хр╣Ир╕нр╣Ар╕Щр╕╖р╣Ир╕нр╕З; attempts = 6 | р╕вр╕▓р╕зр╣Др╕бр╣Ир╕Хр╕гр╕З тАШр╣Др╕бр╣Ир╕Щр╕▒р╕Ър╕гр╕нр╕ЪтАЩ | р╕гр╕нр╕Ър╕кр╕╕р╕Фр╕Чр╣Йр╕▓р╕вр╕бр╕╡ HINT | р╕кр╕╡р╣Ар╕лр╕ер╕╖р╕нр╕Зр╣Др╕бр╣Ир╕Ир╕│р╕Бр╕▒р╕Ф)")
    lb = load_leaderboard()

    name = input("р╣Гр╕кр╣Ир╕Кр╕╖р╣Ир╕нр╕Ьр╕╣р╣Йр╣Ар╕ер╣Ир╕Щ (р╣Гр╕Кр╣Йр╕Кр╕╖р╣Ир╕нр╣Ар╕Фр╕┤р╕бр╣Ар╕Юр╕╖р╣Ир╕нр╣Ар╕Бр╣Зр╕Ър╕Др╕░р╣Бр╕Щр╕Щр╕Хр╣Ир╕н/р╕нр╕▒р╕Ыр╣Ар╕Фр╕Х best): ").strip() or "Player"

    while True:
        diff = input("р╣Ар╕ер╕╖р╕нр╕Бр╕гр╕░р╕Фр╕▒р╕Ър╕Др╕зр╕▓р╕бр╕вр╕▓р╕Б (easy / medium / hard): ").strip().lower()
        if diff in WORDS_BY_LEVEL:
            break
        print("тЪая╕П р╕Юр╕┤р╕бр╕Юр╣Мр╣Бр╕Др╣И easy / medium / hard р╕Щр╕░")

    # р╕зр╕Щр╣Ар╕ер╣Ир╕Щр╕Чр╕╡р╕ер╕░р╕гр╕нр╕Ър╣Гр╕Щ session р╣Ар╕Фр╕╡р╕вр╕з
    session_round = 0
    session_points = 0
    while True:
        session_round += 1
        print(f"\n========== ROUND {session_round} | SESSION POINTS: {session_points} ==========")
        lost, got = play_one_round(diff, name, lb)
        session_points += got

        if lost:
            print(f"\nЁЯЯе р╕Др╕╕р╕Ур╣Бр╕Юр╣Йр╕гр╕нр╕Ър╕ер╣Ир╕▓р╕кр╕╕р╕Ф | SESSION POINTS р╕Бр╣Ир╕нр╕Щр╕гр╕╡р╣Ар╕Лр╣Зр╕Х: {session_points}")
            cont = input("р╕нр╕вр╕▓р╕Бр╣Ар╕ер╣Ир╕Щр╕Хр╣Ир╕нр╣Др╕лр╕б? (y = р╕Хр╣Ир╕н / n = р╕лр╕вр╕╕р╕Ф): ").strip().lower()
            if cont == "y":
                session_points = 0
                session_round = 0
                print("ЁЯФД р╣Ар╕гр╕┤р╣Ир╕б session р╣Гр╕лр╕бр╣И! р╕Др╕░р╣Бр╕Щр╕Щ session р╕Цр╕╣р╕Бр╕гр╕╡р╣Ар╕Лр╣Зр╕Хр╣Ар╕Ыр╣Зр╕Щ 0 (leaderboard р╣Др╕бр╣Ир╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щ)")
                continue
            else:
                print("\nЁЯЫС р╕Ир╕Ър╣Ар╕Бр╕б тАФ р╕Вр╕нр╕Ър╕Др╕╕р╕Ур╕Чр╕╡р╣Ир╣Ар╕ер╣Ир╕Щ! (leaderboard р╕Цр╕╣р╕Бр╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Хр╕▓р╕бр╕гр╕нр╕Ър╕Чр╕╡р╣Ир╕Ьр╣Ир╕▓р╕Щр╕бр╕▓р╣Бр╕ер╣Йр╕з)")
                break

        cont = input("\nтЬЕ р╕Кр╕Щр╕░р╕гр╕нр╕Ър╕Щр╕╡р╣Й! р╣Ар╕ер╣Ир╕Щр╕Хр╣Ир╕нр╣Др╕лр╕б? (y = р╕Хр╣Ир╕н / n = р╕лр╕вр╕╕р╕Ф): ").strip().lower()
        if cont != "y":
            print("\nЁЯЯж р╕Ир╕Ър╣Ар╕Бр╕бр╕Хр╕▓р╕бр╕Др╕│р╕кр╕▒р╣Ир╕З тАФ р╕Др╕░р╣Бр╕Щр╕Щр╣Гр╕Щ leaderboard р╕Цр╕╣р╕Бр╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Хр╕▓р╕бр╕гр╕нр╕Ър╕Чр╕╡р╣Ир╕Ьр╣Ир╕▓р╕Щр╕бр╕▓р╣Бр╕ер╣Йр╕з")
            break

    # р╣Вр╕Кр╕зр╣М LEADERBOARD (р╕Хр╕▒р╕Ф last_play р╕нр╕нр╕Б)
    print("\nЁЯПЖ LEADER BOARD (Top 10 р╣Вр╕Фр╕в Best Score)")
    players = []
    for name_, info in lb.get("players", {}).items():
        players.append({
            "name": name_,
            "best_score": info.get("best_score", 0),
            "total_score": info.get("total_score", 0),
            "games": info.get("games", 0),
        })
    players.sort(key=lambda x: (x["best_score"], x["total_score"]), reverse=True)
    for idx, p in enumerate(players[:10], start=1):
        print(f"{idx:>2}. {p['name']:<12} | best: {p['best_score']:>4} | total: {p['total_score']:>4} | games: {p['games']:>2}")

    print("\nЁЯТ╛ р╕Др╕░р╣Бр╕Щр╕Щр╕Цр╕╣р╕Бр╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╣Гр╕Щ 'leaderboard.json' тАФ р╕гр╕нр╕Ър╕лр╕Щр╣Йр╕▓р╕Юр╕┤р╕бр╕Юр╣Мр╕Кр╕╖р╣Ир╕нр╣Ар╕Фр╕┤р╕бр╣Ар╕Юр╕╖р╣Ир╕нр╣Ар╕ер╣Ир╕Щр╕Хр╣Ир╕нр╣Др╕Фр╣Йр╣Ар╕ер╕в ЁЯШЙ")

if __name__ == "__main__":
    main()
